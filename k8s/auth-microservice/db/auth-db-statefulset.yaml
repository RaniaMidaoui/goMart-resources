apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: db-auth
  labels:
    app: postgres
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
      annotations:
          vault.hashicorp.com/agent-inject: 'true'
          vault.hashicorp.com/role: 'auth'
          vault.hashicorp.com/agent-inject-secret-config: 'secret/data/auth-microservice'
          # Environment variable export template
          vault.hashicorp.com/agent-inject-template-config: |
            {{- with secret "secret/data/auth-microservice" -}}
              POSTGRES_PASSWORD="{{ .Data.data.POSTGRES_PASSWORD }}"
              POSTGRES_USER="{{ .Data.data.POSTGRES_USER }}"
            {{- end }}
    spec:
      initContainers:
        - name: postgres-init
          image: postgres:latest
          command:
          - bash
          - "-c"
          - |
            set -ex
            [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
            ordinal=${BASH_REMATCH[1]}
            if [[ $ordinal -eq 0 ]]; then
              printf "I am the primary"
            else
              printf "I am a read-only replica"
            fi
      serviceAccountName: vault
      containers:
        - name: db-auth
          image: postgres:13
          imagePullPolicy: "IfNotPresent"
          command:
          - sh
          - "-c"
          - |
            export $(cat /vault/secrets/config | xargs)
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: auth-db-storage
              mountPath: /var/lib/postgresql/data
              subPath: postgres
          env:  
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: auth-config
                  key: POSTGRES_DB
      volumes:
        - name: auth-db-storage
          persistentVolumeClaim:
            claimName: db-persistent-volume-claim